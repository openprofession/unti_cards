# Generated by Django 2.2.2 on 2019-07-03 11:56

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Card',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='идентификатор карточки в системе, string', primary_key=True, serialize=False, unique=True, verbose_name='uuid')),
                ('type', models.CharField(choices=[('red', 'Red'), ('yellow', 'Yellow'), ('green', 'Green')], help_text='тип карточки, string, допустимые значения: [“red”, “yellow”, “green”]', max_length=255, verbose_name='Type')),
                ('reason', models.TextField(help_text='причина выдачи карточки, string', max_length=512, verbose_name='Reason')),
                ('source', models.CharField(choices=[('cards', 'Cards'), ('leader', 'Leader'), ('experiments', 'Experiments')], help_text='источник выдачи карточки, string, допустимые значения [“Cards”, “Leader”, “Experiments”]', max_length=255, verbose_name='Source')),
                ('leader_id', models.IntegerField(help_text='идентификатор пользователя в Leader Id, integer', verbose_name='Leader')),
                ('incident_dt', models.DateTimeField(help_text='время нарушения, string, дата в формате “YYYY-MM-DD hh:mm”', verbose_name='Incident date')),
                ('event_uuid', models.CharField(blank=True, help_text='идентификатор мероприятия из Labs, string', max_length=255, null=True, verbose_name='Event uuid')),
                ('place_uuid', models.CharField(blank=True, max_length=255, null=True, verbose_name='идентификатор места проведения мероприятия из Labs, string')),
            ],
            options={
                'verbose_name': 'Card',
                'verbose_name_plural': 'Cards',
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('change_dt', models.DateTimeField(auto_now_add=True, verbose_name='Date change')),
                ('system', models.CharField(choices=[('cards', 'Cards'), ('leader', 'Leader'), ('experiments', 'Experiments')], max_length=255, verbose_name='System')),
                ('name', models.CharField(choices=[('initiated', 'Initiated'), ('published', 'Published'), ('consideration', 'Consideration'), ('issued', 'Issued'), ('eliminated', 'Eliminated'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('recommended', 'Recommended')], max_length=255, verbose_name='Name')),
                ('is_public', models.BooleanField(default=False, verbose_name='is public')),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='red_cards.Card', verbose_name='card')),
            ],
            options={
                'verbose_name': 'Status',
                'verbose_name_plural': 'Status',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('second_name', models.CharField(max_length=50)),
                ('is_assistant', models.BooleanField(default=False)),
                ('unti_id', models.PositiveIntegerField(db_index=True, null=True)),
                ('leader_id', models.CharField(default='', max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
