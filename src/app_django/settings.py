"""
Django settings for app_django project.

Generated by 'django-admin startproject' using Django 2.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import environ

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

env = environ.Env()
env.read_env(os.path.join(BASE_DIR, '.env'))
print('The .env file has been loaded. See base.py for more information')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'cgju4#-d_ewl!vt$t=!hh+0!jpqk+teyo$kwl1v(6$boob2st='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*', ]

# Application definition

INSTALLED_APPS = [
    'social_django',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'social_core',
    'django_filters',
    'rest_framework',

    'rest_framework.authtoken',
    'bootstrap_pagination',

    'widget_tweaks',

    'red_cards',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # "social_django.middleware.SocialAuthExceptionMiddleware",
    'app_django.middleware.CustomSocialAuthMiddleware',
]

ROOT_URLCONF = 'app_django.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                "social_django.context_processors.backends",
                "social_django.context_processors.login_redirect",
            ],
        },
    },
]

WSGI_APPLICATION = 'app_django.wsgi.application'

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    ),
    # https://www.django-rest-framework.org/api-guide/authentication/#setting-the-authentication-scheme
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # 'rest_framework.authentication.BasicAuthentication', # only for dev!
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ),
    # https://florimondmanca.github.io/djangorestframework-api-key/guide/
    # https://florimondmanca.github.io/djangorestframework-api-key/guide/#setting-permissions
    # https://www.django-rest-framework.org/api-guide/permissions/
    # "DEFAULT_PERMISSION_CLASSES": [
    #     "rest_framework_api_key.permissions.HasAPIKey",
    # ]
    'DATETIME_FORMAT': "%Y-%m-%d %H:%M",  # YYYY-MM-DD hh:mm
}
# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': env("MYSQL_DATABASE"),
        'USER': env("MYSQL_USER"),
        'PASSWORD': env("MYSQL_PASSWORD"),
        'HOST': env("DB_NAME"),
        'PORT': 3306,
        'OPTIONS': {'charset': 'utf8'},
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'ru-RU'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'assets')

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

# https://docs.djangoproject.com/en/2.2/ref/settings/#datetime-input-formats
# from django.conf.global_settings import DATETIME_INPUT_FORMATS

AUTH_USER_MODEL = 'red_cards.User'
USER_FIELDS = (
    'email',
    'username',
    'first_name',
    'last_name',
    'unti_id',
    'leader_id',
)

SSO_UNTI_URL = env("SSO_UNTI_URL")
SOCIAL_AUTH_UNTI_KEY = env("SOCIAL_AUTH_UNTI_KEY")
SOCIAL_AUTH_UNTI_SECRET = env("SOCIAL_AUTH_UNTI_SECRET")
SOCIAL_AUTH_UNTI_REDIRECT_URL = env("SOCIAL_AUTH_UNTI_REDIRECT_URL")

LOGOUT_REDIRECT = env("LOGOUT_REDIRECT", default="https://now.2035.university")

AUTHENTICATION_BACKENDS = (
    'app_django.auth.UNTIBackend',
    'django.contrib.auth.backends.ModelBackend',
)
# название тега, по которому приложение понимает, что пользователь ассистент
ASSISTANT_TAGS_NAME = ['assistant', 'island_assistant']

# интеграция по API с другими приложениями
CONNECTION_TIMEOUT = 5000

XLE_URL = env("XLE_URL")#'https://xle.u2035test.ru'
XLE_TOKEN = env("XLE_TOKEN")#'d1veitls2akofd5q'
XLE_CONTEXT = env("XLE_CONTEXT")#'island1022-demo'

LABS_URL = env("LABS_URL")
LABS_TOKEN = env("LABS_TOKEN")

NOW_URL = env("NOW_URL")
NOW_TOKEN = env("NOW_TOKEN")

ATTENDANCE_URL = env("ATTENDANCE_URL")
ATTENDANCE_TOKEN = env("ATTENDANCE_TOKEN")#'89ef768657b74893ca9ebaf10ebcd51297376c4c'

UPLOADS_URL = env("UPLOADS_URL")
UPLOADS_TOKEN = env("UPLOADS_TOKEN")

from django.urls import reverse_lazy

LOGIN_URL = reverse_lazy('social:begin', kwargs=dict(backend='unti'))

FILE_UPLOAD_HANDLERS = (
    "django.core.files.uploadhandler.MemoryFileUploadHandler",
    "django.core.files.uploadhandler.TemporaryFileUploadHandler",
)

# ############################################################################ #
LOG_LEVEL = os.getenv('LOG_LEVEL', 'DEBUG').strip().upper()

if DEBUG:
    LOG_LEVEL = 'DEBUG'
#

LOG_DIR = os.path.join(BASE_DIR, 'log')
if not os.path.exists(LOG_DIR):
    os.mkdir(LOG_DIR)
#


# output-format
# https://docs.python.org/2/library/logging.html#logrecord-attributes
LOG_FORMAT = (
    '%(asctime)s |'
    '%(thread)s |'
    # '[ %(pathname)-110s ]'
    '%(module)-20s '  # python.module.path
    '%(lineno)4d | '  # code line-number
    '%(funcName)-20s '
    # '| %(name)-25s '                    # logging-name
    '%(levelname)-7s'
    ' :    %(message)s'
)
_datetime_format = '%m.%d %H:%M:%S'

_KB = 1024
_MB = _KB * 1024

# https://docs.djangoproject.com/en/2.1/topics/logging/#examples
# https://lincolnloop.com/blog/django-logging-right-way/
APP_NAME = 'django_cards'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    'formatters': {
        'verbose': {
            'class':    'logging.Formatter',
            'format':   LOG_FORMAT,
            'datefmt':  _datetime_format,
        },
        # 'detail_trice': {
        #     'class':    'jen_tools.common.logging.DetailFormatter',
        #     'format':   LOG_FORMAT,
        #     'datefmt':  _datetime_format,
        # },
    },

    'handlers': {
        'console': {
            'class':        'logging.StreamHandler',
            'level':        'DEBUG',
            'formatter':    'verbose'
        },
        'file_debug': {
            'class':        'logging.handlers.RotatingFileHandler',
            'level':        'DEBUG',
            'formatter':    'verbose',
            'filename':     os.path.join(
                LOG_DIR, '{}.django.debug.log'.format(APP_NAME)),
            'mode':         'a',
            'encoding':     'utf-8',
            'maxBytes':     _MB * 10,
            'backupCount':  1,
        },
        'file_error': {
            'class':        'logging.handlers.RotatingFileHandler',
            'level':        'ERROR',
            'formatter':    'verbose',
            'filename':     os.path.join(
                LOG_DIR, '{}.django.error.log'.format(APP_NAME)),
            'mode':         'a',
            'encoding':     'utf-8',
            'maxBytes':     _MB * 10,
            'backupCount':  1,
        },
        # 'file_error_detail_trice': {
        #     'class':        'logging.handlers.RotatingFileHandler',
        #     'level':        'ERROR',
        #     'formatter':    'detail_trice',
        #     'filename':     os.path.join(
        #         LOG_DIR, '{}.django.error.detail.log'.format(APP_NAME)),
        #     'mode':         'a',
        #     'encoding':     'utf-8',
        #     'maxBytes':     _MB * 10,
        #     'backupCount':  1,
        # },
        # 'db_log': {
        #     'level':        'WARNING',
        #     'formatter':    'detail_trice',
        #     'class':        'django_db_logger.handlers.DatabaseLogHandler'
        # },
    },

    'loggers': {
        '': {
            'handlers':     [
                'console',
                'file_debug',
                'file_error',
                # 'file_error_detail_trice',
                # 'db_log',
            ],
            'level':        'INFO' if DEBUG else 'WARNING',
            'propagate': False,
        },
        # - - -
        'app_django':       {'level': LOG_LEVEL, 'propagate': True, },
        'red_cards':       {'level': LOG_LEVEL, 'propagate': True, },

        'workers':           {'level': LOG_LEVEL, 'propagate': True, },
    },
}

# ############################################################################ #
try:
    from .settings_local import *
except ImportError:
    pass
